version: '3.8'

services:
  # Redis for rate limiting and caching
  redis:
    image: redis:7-alpine
    container_name: ddos_redis
    ports:
      - "6379:6379"
    networks:
      - ddos_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Web Server (Target)
  web_server:
    build:
      context: ./src/web_server
      dockerfile: Dockerfile
    container_name: ddos_web_server
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - redis
    networks:
      - ddos_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  # Firewall/WAF
  firewall:
    build:
      context: ./src/firewall
      dockerfile: Dockerfile
    container_name: ddos_firewall
    ports:
      - "8080:8080"
    environment:
      - BACKEND_HOST=web_server
      - BACKEND_PORT=5000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - web_server
      - redis
    networks:
      - ddos_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  # Detector/IDS
  detector:
    build:
      context: ./src/detector
      dockerfile: Dockerfile
    container_name: ddos_detector
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - WEB_SERVER_HOST=web_server
      - WEB_SERVER_PORT=5000
    depends_on:
      - redis
      - web_server
    networks:
      - ddos_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  # Attacker Simulator
  attacker:
    build:
      context: ./src/attacker
      dockerfile: Dockerfile
    container_name: ddos_attacker
    environment:
      - TARGET_HOST=firewall
      - TARGET_PORT=8080
      - ATTACK_DURATION=60
      - ATTACK_INTENSITY=low
    depends_on:
      - firewall
      - web_server
    networks:
      - ddos_network
    stdin_open: true
    tty: true
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: ddos_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./src/monitor/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - ddos_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: ddos_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ADMIN_USER=admin
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./src/monitor/grafana-dashboard.json:/etc/grafana/provisioning/dashboards/dashboard.json
    depends_on:
      - prometheus
    networks:
      - ddos_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

networks:
  ddos_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  prometheus_data:
  grafana_data: